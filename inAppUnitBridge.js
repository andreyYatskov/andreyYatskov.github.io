(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["inAppUnitBridge"],{

/***/ "./inAppBridge/in-app-unit-bridge.js":
/*!*******************************************!*\
  !*** ./inAppBridge/in-app-unit-bridge.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint-disable no-underscore-dangle, no-console */

var interactionElement;
var mongoIdRegex = /^[a-f\d]{24}$/i;
var blackListEvents = {
  AD_CLOSED: 'apester_ad_closed',
  AD_OPEN: 'apester_ad_open',
  SLIDE_LOADED: 'slide_loaded',
  RESIZE: 'apester_resize_unit',
  SEND_INTERACTIONS: 'send-intersections'
};
var changeInteractionUrl = {
  FEED_NEXT_UNIT: 'move_to_next_interaction',
  STORY_LOADED: 'apester_interaction_loaded'
};
var changeInteractionState = {
  FULLSCREEN_ON: 'fullscreen_on',
  PAUSE: 'player_pause',
  RESUME: 'player_resume',
  RESTART: 'restart_unit'
};
var INIT_INAPP_PARAMS = 'init_inapp_params';
var adHeight = 0;
var mobileEventList = {
  RESIZE: 'apester_resize_unit',
  VIEWABILITY_CHANGE: 'apester_view_status_change'
};
var unitSize = {
  height: 450,
  width: 0
};
var latestSizeSent = {
  height: 0,
  width: 0
};
var getParamsFromUrl = function getParamsFromUrl() {
  var url = new URL(window.location);
  var urlSearchParams = new URLSearchParams(url.search);
  return Object.fromEntries(urlSearchParams);
};
var getMediaIdFromPath = function getMediaIdFromPath() {
  var lastParthOfPath = window.location.pathname.split('/').pop();
  if (lastParthOfPath.match(mongoIdRegex)) {
    return lastParthOfPath;
  }
  return '';
};
var init = function init(inAppParams, isInitFromEvent) {
  var params = inAppParams || getParamsFromUrl();
  var _params$mediaId = params.mediaId,
    mediaId = _params$mediaId === void 0 ? getMediaIdFromPath() : _params$mediaId,
    channelToken = params.channelToken,
    gdprString = params.gdprString,
    noApesterAds = params.noApesterAds,
    fallback = params.fallback,
    context = params.context,
    tags = params.tags,
    autoFullscreen = params.autoFullscreen,
    isSandBoxMode = params.isSandBoxMode,
    agencyName = params.agencyName,
    agencyImage = params.agencyImage;
  if (!mediaId && !channelToken) {
    var handler = function handler(event) {
      var _ref = event || {},
        data = _ref.data;
      var _ref2 = data || {},
        eventType = _ref2.type;
      if (!data || !eventType) {
        return;
      }
      if (eventType === INIT_INAPP_PARAMS) {
        var eventParams = data.params;
        init(eventParams, true);
        window.removeEventListener('message', handler);
      }
    };
    window.addEventListener('message', handler);
    return;
  }
  if (!window.__tcfapi) {
    window.__tcfapi = function (command, version, cb) {
      if (['getTCData', 'addEventListener'].includes(command) === false) {
        return;
      }
      var success = !!gdprString;
      var TCData = {
        tcfPolicyVersion: 2,
        eventStatus: 'tcloaded',
        gdprApplies: success,
        tcString: gdprString || undefined
      };
      cb(TCData, success);
    };
  }
  interactionElement = channelToken ? document.createElement('interaction') : document.createElement('div');
  if (noApesterAds && noApesterAds === 'true') {
    window.__noApesterAds = true;
  }
  if (mediaId) {
    interactionElement.setAttribute('data-media-id', "".concat(mediaId));
    interactionElement.className = 'apester-media';
  } else if (channelToken) {
    interactionElement.setAttribute('data-token', "".concat(channelToken));
    interactionElement.setAttribute('data-fallback', "".concat(fallback));
    interactionElement.setAttribute('data-context', "".concat(context));
    interactionElement.setAttribute('tags', "".concat(tags));
  }
  if (autoFullscreen) {
    interactionElement.setAttribute('data-auto-fullscreen', true);
  }
  if (isSandBoxMode) {
    interactionElement.setAttribute('sandbox-mode', true);
  }
  if (agencyName && agencyImage) {
    interactionElement.setAttribute('agency-data', "{\"agencyName\": \"".concat(agencyName, "\", \"agencyImage\": \"").concat(agencyImage, "\"}"));
  }
  window.document.body.appendChild(interactionElement);
  if (isInitFromEvent) {
    window.APESTER.reload();
  }
};
var sendEventToApp = function sendEventToApp(eventData) {
  // eslint-disable-next-line @typescript-eslint/no-unused-expressions
  window.Android && window.Android.apesterUnitProxy(JSON.stringify(eventData)) || window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.apesterUnitProxy.postMessage(JSON.stringify(eventData));
};
var sendResizeEvent = function sendResizeEvent(heightToUpdate, widthToUpdate) {
  var isFinalSizeForInApp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (latestSizeSent.height !== heightToUpdate || latestSizeSent.width !== widthToUpdate || isFinalSizeForInApp) {
    latestSizeSent.height = heightToUpdate;
    latestSizeSent.width = widthToUpdate;
    var event = {
      height: heightToUpdate,
      width: widthToUpdate,
      type: mobileEventList.RESIZE,
      isFinalSizeForInApp: isFinalSizeForInApp
    };
    sendEventToApp(event);
  }
};
window.__APESTER_DEFFERED_AD_LOAD = true;
window.addEventListener('message', function (event) {
  var eventData = event.data;
  if (!eventData || !eventData.type) {
    return;
  }
  var eventType = eventData.type;
  if (eventType === blackListEvents.AD_OPEN || eventType === blackListEvents.AD_CLOSED) {
    adHeight = eventType === blackListEvents.AD_OPEN ? eventData.size.height : 0;
    sendResizeEvent(unitSize.height + adHeight, unitSize.width);
    console.log("Send ".concat(eventType, " to proxy"));
    return;
  }
  if (eventType === blackListEvents.RESIZE) {
    sendResizeEvent(eventData.height + adHeight, eventData.width, eventData.isFinalSizeForInApp);
    unitSize.height = eventData.height;
    unitSize.width = eventData.width;
    console.log("Send ".concat(eventType, " to proxy"));
    return;
  }
  if (eventType === changeInteractionUrl.STORY_LOADED || eventType === changeInteractionUrl.FEED_NEXT_UNIT) {
    var _eventData$interactio, _eventData$nextIntera;
    var interactionId = (_eventData$interactio = eventData === null || eventData === void 0 ? void 0 : eventData.interactionId) !== null && _eventData$interactio !== void 0 ? _eventData$interactio : eventData === null || eventData === void 0 || (_eventData$nextIntera = eventData.nextInteraction) === null || _eventData$nextIntera === void 0 ? void 0 : _eventData$nextIntera.interactionId;
    var pathWithoutUnitId = window.location.pathname.split('/').filter(function (e) {
      return !e.match(mongoIdRegex);
    });
    var newPath = pathWithoutUnitId.join('/');

    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    window.history.pushState(params, 'Apester Story', "".concat(newPath, "/").concat(interactionId));
  }
  if (eventType !== blackListEvents.SEND_INTERACTIONS) {
    console.log("Send ".concat(eventType, " to proxy"));
    sendEventToApp(eventData);
  }
});
window.__sendApesterEvent = function (event) {
  try {
    window.postMessage(event, '*');
  } catch (e) {
    console.log('error parsing json');
  }
};
window.__getHeight = function () {
  return unitSize.height + adHeight;
};
window.__setApesterViewabiity = function (isVisible, initialInteractionId) {
  try {
    var event = {
      type: mobileEventList.VIEWABILITY_CHANGE,
      isVisible: isVisible,
      initialInteractionId: initialInteractionId
    };
    window.postMessage(event, '*');
  } catch (e) {
    console.log('error parsing json');
  }
};
window.__apesterIsVisible = function () {
  return window.Android && window.Android.isVisible && window.Android.isVisible() || window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.validateUnitViewVisibity && window.webkit.messageHandlers.validateUnitViewVisibity.postMessage('') && false /** ios update async */;
};

// full screen "story slide progress" support

window.__storyResume = function () {
  if (!interactionElement) return;
  var event = {
    type: changeInteractionState.RESUME
  };
  interactionElement.querySelector('iframe').contentWindow.postMessage(event, '*');
};
window.__storyPause = function () {
  if (!interactionElement) return;
  var event = {
    type: changeInteractionState.PAUSE
  };
  interactionElement.querySelector('iframe').contentWindow.postMessage(event, '*');
};
window.__storyRestart = function () {
  if (!interactionElement) return;
  var event = {
    type: changeInteractionState.RESTART
  };
  interactionElement.querySelector('iframe').contentWindow.postMessage(event, '*');
};
// end of full screen "story slide progress" support
var params = window.__getInitParams ? window.__getInitParams() : undefined;
init(params);

/***/ })

},[["./inAppBridge/in-app-unit-bridge.js","runtime"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
